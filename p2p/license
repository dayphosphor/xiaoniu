<?php
 
 //引入数据库的系统配置及定义配置函数
define("APP_INDEX",'APP_INDEX','');

//关于安装的检测
if(!file_exists(APP_ROOT_PATH."public/install.lock") && function_exists("app_redirect"))
{
    app_redirect(APP_ROOT."/install/index.php");
}

if(file_exists(APP_ROOT_PATH.'system/config.php'))
    $sys_config = require APP_ROOT_PATH.'system/config.php';
    

function app_conf($name)
{
    if($name=="SITE_TITLE"){
        $name = "SHOP_TITLE";
    }
    return stripslashes($GLOBALS['sys_config'][$name]);
}


//引入时区配置及定义时间函数
if(function_exists('date_default_timezone_set'))
    date_default_timezone_set(app_conf('DEFAULT_TIMEZONE'));
//end 引入时区配置及定义时间函数

$define_file = APP_ROOT_PATH."system/define.php"; 
if(file_exists($define_file))
    require_once $define_file; //加载常量定义
define('DB_PREFIX', app_conf('DB_PREFIX'));

$dist_cfg = APP_ROOT_PATH."system/dist_cfg.php";
if(file_exists($dist_cfg))
    $distribution_cfg = require_once $dist_cfg;

//关于分布式配置
$distribution_cfg["CACHE_TYPE"] =   "File"; //File,Memcached,MemcacheSASL,Xcache,Db     
$distribution_cfg["CACHE_LOG"]  =   false;  //是否需要在本地记录cache的key列表
$distribution_cfg["SESSION_TYPE"]   =   "File"; //"Db/MemcacheSASL/File"        
$distribution_cfg['ALLOW_DB_DISTRIBUTE']    =   false;  //是否支持读写分离

$distribution_cfg["CSS_JS_OSS"] =   false; //脚本样式是否同步到oss
$distribution_cfg["OSS_TYPE"]   =   ""; //同步文件存储的类型: ES_FILE,ALI_OSS,NONE 分别为原es_file.php同步,阿里云OSS,以及无OSS分布     
$distribution_cfg["ORDER_DISTRIBUTE_COUNT"] =   "0"; //订单表分片数量
$distribution_cfg['DOMAIN_ROOT']    =   app_conf("DOMAIN_ROOT");  //域名根
$distribution_cfg['COOKIE_PATH']    =   '/';
//end 分布式


//定义缓存
if(!function_exists("load_fanwe_cache"))
{
    function load_fanwe_cache()
    {
        global $distribution_cfg;
        $type = $distribution_cfg["CACHE_TYPE"];
        $cacheClass = 'Cache'.ucwords(strtolower(strim($type)))."Service";
        if(file_exists(APP_ROOT_PATH."system/cache/".$cacheClass.".php"))
        {
            require_once APP_ROOT_PATH."system/cache/".$cacheClass.".php";
            if(class_exists($cacheClass))
            {
                $cache = new $cacheClass();
            }
            return $cache;
        }
        else
        {
            $file_cache_file = APP_ROOT_PATH.'system/cache/CacheFileService.php';
            if(file_exists($file_cache_file))
            require_once APP_ROOT_PATH.'system/cache/CacheFileService.php';
            if(class_exists("CacheFileService"))
                $cache = new CacheFileService();
            return $cache;
        }
    }
}

$cache_service_file = APP_ROOT_PATH."system/cache/Cache.php";
if(file_exists($cache_service_file))
    require_once $cache_service_file;
if(class_exists("CacheService"))
    $cache = CacheService::getInstance();
//end 定义缓存



//定义DB
require APP_ROOT_PATH.'system/db/db.php';
if(!file_exists(APP_ROOT_PATH.'public/runtime/app/db_caches/'))
    mkdir(APP_ROOT_PATH.'public/runtime/app/db_caches/',0777);
$pconnect = false;
$db = new mysql_db(app_conf('DB_HOST').":".app_conf('DB_PORT'), app_conf('DB_USER'),app_conf('DB_PWD'),app_conf('DB_NAME'),'utf8',$pconnect);
//end 定义DB


if(function_exists("update_sys_config"))
    update_sys_config();

//定义模板引擎
require  APP_ROOT_PATH.'system/template/template.php';
if(!file_exists(APP_ROOT_PATH.'public/runtime/app/tpl_caches/'))
    mkdir(APP_ROOT_PATH.'public/runtime/app/tpl_caches/',0777); 
if(!file_exists(APP_ROOT_PATH.'public/runtime/app/tpl_compiled/'))
    mkdir(APP_ROOT_PATH.'public/runtime/app/tpl_compiled/',0777);
$tmpl = new AppTemplate;

//end 定义模板引擎

require_once APP_ROOT_PATH.'system/utils/es_cookie.php';
require_once APP_ROOT_PATH."system/utils/es_session.php";

function get_http()
{
    return (isset($_SERVER['HTTPS']) && (strtolower($_SERVER['HTTPS']) != 'off')) ? 'https://' : 'http://';
}

function get_domain()
{
    /* 协议 */
    $protocol = get_http();

    /* 域名或IP地址 */
    if (isset($_SERVER['HTTP_X_FORWARDED_HOST']))
    {
        $host = $_SERVER['HTTP_X_FORWARDED_HOST'];
    }
    elseif (isset($_SERVER['HTTP_HOST']))
    {
        $host = $_SERVER['HTTP_HOST'];
    }
    else
    {
        /* 端口 */
        if (isset($_SERVER['SERVER_PORT']))
        {
            $port = ':' . $_SERVER['SERVER_PORT'];

            if ((':80' == $port && 'http://' == $protocol) || (':443' == $port && 'https://' == $protocol))
            {
                $port = '';
            }
        }
        else
        {
            $port = '';
        }

        if (isset($_SERVER['SERVER_NAME']))
        {
            $host = $_SERVER['SERVER_NAME'] . $port;
        }
        elseif (isset($_SERVER['SERVER_ADDR']))
        {
            $host = $_SERVER['SERVER_ADDR'] . $port;
        }
    }

    return $protocol . $host;
}


function get_host()
{
    /* 域名或IP地址 */
    if (isset($_SERVER['HTTP_X_FORWARDED_HOST']))
    {
        $host = $_SERVER['HTTP_X_FORWARDED_HOST'];
    }
    elseif (isset($_SERVER['HTTP_HOST']))
    {
        $host = $_SERVER['HTTP_HOST'];
    }
    else
    {
        if (isset($_SERVER['SERVER_NAME']))
        {
            $host = $_SERVER['SERVER_NAME'];
        }
        elseif (isset($_SERVER['SERVER_ADDR']))
        {
            $host = $_SERVER['SERVER_ADDR'];
        }
    }
    return $host;
}

if(!function_exists("filter_ma_request")){
    function filter_ma_request($str){
        $search = array("../","\n","\r","\t","\r\n","'","<",">","\"","%");
            
        return str_replace($search,"",$str);
    }
}

if(app_conf("URL_MODEL")==1)
{
    //重写模式
    $current_url = APP_ROOT;
    $current_file = explode("/",_PHP_FILE_);
    $current_file = $current_file[count($current_file)-1];
    if($current_file=='index.php'||$current_file=='shop.php')
    $app_index = "";
    else 
    $app_index = str_replace(".php","",$current_file);
    if($app_index!="")
    $current_url = $current_url."/".$app_index;
    
    $rewrite_param = $_REQUEST['rewrite_param'];
    $rewrite_param = explode("/",$rewrite_param);
    if($rewrite_param){
        foreach($rewrite_param as $k=>$param_item)
        {
            if($param_item!='')
            $rewrite_param_array[] = $param_item;
        }
    }
    if($rewrite_param_array){
        foreach ($rewrite_param_array as $k=>$v)
        {
            if(substr($v,0,1)=='-')
            {
                //扩展参数
                $v = substr($v,1);
                $ext_param = explode("-",$v);
                foreach($ext_param as $kk=>$vv)
                {
                    if($kk%2==0)
                    {
                        if(preg_match("/(\w+)\[(\w+)\]/",$vv,$matches))
                        {
                            $_GET[$matches[1]][$matches[2]] = $ext_param[$kk+1];
                        }
                        else
                        $_GET[$ext_param[$kk]] = $ext_param[$kk+1];
                        
                        if($ext_param[$kk]!="p")
                        {
                            $current_url.=$ext_param[$kk];  
                            $current_url.="-".$ext_param[$kk+1]."-";
                        }
                    }
                }           
            }
            elseif($k==0)
            {
                //解析ctl与act
                $ctl_act = explode("-",$v);
                if($ctl_act[0]!='cid'&&$ctl_act[0]!='id'&&$ctl_act[0]!='aid'&&$ctl_act[0]!='qid'&&$ctl_act[0]!='pid'&&$ctl_act[0]!='cid'&&$ctl_act[0]!='a')
                {
                    $_GET['ctl'] = $ctl_act[0];
                    $_GET['act'] = $ctl_act[1]; 
            
                    $current_url.="/".$ctl_act[0];  
                    if($ctl_act[1]!="")
                    $current_url.="-".$ctl_act[1]."/";  
                    else
                    $current_url.="/";  
                }
                else
                {
                    //扩展参数
                    $ext_param = explode("-",$v);
                    foreach($ext_param as $kk=>$vv)
                    {
                        if($kk%2==0)
                        {
                            if(preg_match("/(\w+)\[(\w+)\]/",$vv,$matches))
                            {
                                $_GET[$matches[1]][$matches[2]] = $ext_param[$kk+1];
                            }
                            else
                            $_GET[$ext_param[$kk]] = $ext_param[$kk+1];
                            
                            if($ext_param[$kk]!="p")
                            {
                                if($kk==0)$current_url.="/";
                                $current_url.=$ext_param[$kk];  
                                $current_url.="-".$ext_param[$kk+1]."-";    
                            }
                        }
                    }
                }
                
            }elseif($k==1)
            {
                //扩展参数
                $ext_param = explode("-",$v);
                foreach($ext_param as $kk=>$vv)
                {
                    if($kk%2==0)
                    {
                        if(preg_match("/(\w+)\[(\w+)\]/",$vv,$matches))
                        {
                            $_GET[$matches[1]][$matches[2]] = $ext_param[$kk+1];
                        }
                        else
                        $_GET[$ext_param[$kk]] = $ext_param[$kk+1];
                        
                        if($ext_param[$kk]!="p")
                        {
                            $current_url.=$ext_param[$kk];  
                            $current_url.="-".$ext_param[$kk+1]."-";
                        }
                    }
                }           
            }
        }
    }
    $current_url = substr($current_url,-1)=="-"?substr($current_url,0,-1):$current_url; 
}
unset($_REQUEST['rewrite_param']);
unset($_GET['rewrite_param']);


$_REQUEST = array_merge($_GET,$_POST);
filter_request($_REQUEST);

$lang_file = APP_ROOT_PATH.'/app/Lang/'.app_conf("SHOP_LANG").'/lang.php';
if(file_exists($lang_file))
    $lang = require_once $lang_file;


function run_info()
{

    if(!SHOW_DEBUG)return "";

    $query_time = number_format($GLOBALS['db']->queryTime,6);

    if($GLOBALS['begin_run_time']==''||$GLOBALS['begin_run_time']==0)
    {
        $run_time = 0;
    }
    else
    {
        if (PHP_VERSION >= '5.0.0')
        {
            $run_time = number_format(microtime(true) - $GLOBALS['begin_run_time'], 6);
        }
        else
        {
            list($now_usec, $now_sec)     = explode(' ', microtime());
            list($start_usec, $start_sec) = explode(' ', $GLOBALS['begin_run_time']);
            $run_time = number_format(($now_sec - $start_sec) + ($now_usec - $start_usec), 6);
        }
    }

    /* 内存占用情况 */
    if (function_exists('memory_get_usage'))
    {
        $unit=array('B','KB','MB','GB');
        $size = memory_get_usage();
        $used = @round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i];
        $memory_usage = lang("MEMORY_USED",$used);
    }
    else
    {
        $memory_usage = '';
    }

    /* 是否启用了 gzip */
    $enabled_gzip = (app_conf("GZIP_ON") && function_exists('ob_gzhandler'));
    $gzip_enabled = $enabled_gzip ? lang("GZIP_ON") : lang("GZIP_OFF");

    $str = lang("QUERY_INFO_STR",$GLOBALS['db']->queryCount, $query_time,$gzip_enabled,$memory_usage,$run_time);

    foreach($GLOBALS['db']->queryLog as $K=>$sql)
    {
        if($K==0)$str.="<br />SQL语句列表：";
        $str.="<br />行".($K+1).":".$sql;
    }

    return "<div style='width:940px; padding:10px; line-height:22px; border:1px solid #ccc; text-align:left; margin:30px auto; font-size:14px; color:#999; height:150px; overflow-y:auto;'>".$str."</div>";
}

function lang($key)
{
    $args = func_get_args();//取得所有传入参数的数组
    $key = strtoupper($key);
    if(isset($GLOBALS['lang'][$key]))
    {
        if(count($args)==1)
            return $GLOBALS['lang'][$key];
        else
        {
            $result = $key;
            $cmd = '$result'." = sprintf('".$GLOBALS['lang'][$key]."'";
            for ($i=1;$i<count($args);$i++)
            {
                $cmd .= ",'".$args[$i]."'";
            }
            $cmd.=");";
            eval($cmd);
            return $result;
        }
    }
    else
        return $key;
}


function adv_preg($r){
    return $GLOBALS['adv']['code'];
}


/**
 * 下个还款日
 */
function next_replay_month($time,$m=1){
    $str_t = to_timespan(to_date($time)." ".$m." month ");
    return $str_t;
}

/**
 * 判断审核的资料是否过期
 */
function user_info_expire($u_info){
    $time = TIME_UTC;
    $expire_time = 6*30*24*3600;
    
    if($u_info['workpassed']==1){
        if(($time - $u_info['workpassed_time']) > $expire_time){
            $expire['workpassed_expire'] = 1;
        }
    }
    if($u_info['incomepassed']==1){
        if(($time - $u_info['incomepassed_time']) > $expire_time){
            $expire['incomepassed_expire'] = 1;
        }
    }
    if($u_info['creditpassed']==1){
        if(($time - $u_info['creditpassed_time']) > $expire_time){
            $expire['creditpassed_expire'] = 1;
        }
    }
    if($u_info['residencepassed']==1){
        if(($time - $u_info['residencepassed_time']) > $expire_time){
            $expire['residencepassed_expire'] = 1;
        }
    }
    
    return $expire;
}

/*格式化统计*/
function format_conf_count($number){
    if($number=="")
        return "0<em>.00</em>";
        
    $attr_number = explode(".",$number);
    
    return $attr_number[0]."<em>".(trim($attr_number[1]) == "" ? ".00" : ".".$attr_number[1])."</em>";
}


if(!function_exists("format_image_path"))
{
    function format_image_path($out)
    {
        //对图片路径的修复
        if($GLOBALS['distribution_cfg']['OSS_TYPE']&&$GLOBALS['distribution_cfg']['OSS_TYPE']!="NONE")
        {
            $domain = $GLOBALS['distribution_cfg']['OSS_DOMAIN'];
        }
        else
        {
            $domain = SITE_DOMAIN.APP_ROOT;
        }
        $out = str_replace(APP_ROOT."./public/",$domain."/public/",$out);
        $out = str_replace("./public/",$domain."/public/",$out);
        return $out;
    
    }
}


/**
 * 将单个图片同步到远程的图片服务器
 * @param string $url 本地的图片地址，"./public/......"
 */
if(!function_exists("syn_to_remote_image_server"))
{
    function syn_to_remote_image_server($url)
    {
        if($GLOBALS['distribution_cfg']['OSS_TYPE']&&$GLOBALS['distribution_cfg']['OSS_TYPE']!="NONE")
        {
            if($GLOBALS['distribution_cfg']['OSS_TYPE']=="ES_FILE")
            {
                $pathinfo = pathinfo($url);
                $file = $pathinfo['basename'];
                $dir = $pathinfo['dirname'];
                $dir = str_replace("./public/", "", $dir);
                $filefull = SITE_DOMAIN.APP_ROOT."/public/".$dir."/".$file;
                $syn_url = $GLOBALS['distribution_cfg']['OSS_DOMAIN']."/es_file.php?username=".$GLOBALS['distribution_cfg']['OSS_ACCESS_ID']."&password=".$GLOBALS['distribution_cfg']['OSS_ACCESS_KEY']."&file=".
                        $filefull."&path=".$dir."/&name=".$file."&act=0";
                @file_get_contents($syn_url);
            }
            elseif($GLOBALS['distribution_cfg']['OSS_TYPE']=="ALI_OSS")
            {
                $pathinfo = pathinfo($url);
                $file = $pathinfo['basename'];
                $dir = $pathinfo['dirname'];
                $dir = str_replace("./public/", "public/", $dir);
                    
                $ali_oss_sdk = APP_ROOT_PATH."system/alioss/sdk.class.php";
                if(file_exists($ali_oss_sdk))
                {
                    require_once $ali_oss_sdk;
                    
                    if(class_exists("ALIOSS"))
                    {
                        $oss_sdk_service = new ALIOSS();
                        //设置是否打开curl调试模式
                        $oss_sdk_service->set_debug_mode(FALSE);
                        
                        $bucket = $GLOBALS['distribution_cfg']['OSS_BUCKET_NAME'];
                        $object = $dir."/".$file;
                        $file_path = APP_ROOT_PATH.$dir."/".$file;
                        
                        $oss_sdk_service->upload_file_by_file($bucket,$object,$file_path);
                    }
                    
                }               
            }
        }
    
    }
}

/**
 * 同步脚本样式缓存 $url:'public/runtime/statics/biz/'.$url.'.css';
 * @param unknown_type $url
 */
if(!function_exists("syn_to_remote_file_server"))
{
    function syn_to_remote_file_server($url)
    {
        if($GLOBALS['distribution_cfg']['OSS_TYPE']&&$GLOBALS['distribution_cfg']['OSS_TYPE']!="NONE")
        {
            if($GLOBALS['distribution_cfg']['OSS_TYPE']=="ES_FILE")
            {
                $pathinfo = pathinfo($url);
                $file = $pathinfo['basename'];
                $dir = $pathinfo['dirname'];
                $dir = str_replace("public/", "", $dir);
                $filefull = SITE_DOMAIN.APP_ROOT."/public/".$dir."/".$file;
                $syn_url = $GLOBALS['distribution_cfg']['OSS_DOMAIN']."/es_file.php?username=".$GLOBALS['distribution_cfg']['OSS_ACCESS_ID']."&password=".$GLOBALS['distribution_cfg']['OSS_ACCESS_KEY']."&file=".
                        $filefull."&path=".$dir."/&name=".$file."&act=0";
                @file_get_contents($syn_url);
            }
            elseif($GLOBALS['distribution_cfg']['OSS_TYPE']=="ALI_OSS")
            {
                $pathinfo = pathinfo($url);
                $file = $pathinfo['basename'];
                $dir = $pathinfo['dirname'];
    
                $ali_oss_sdk = APP_ROOT_PATH."system/alioss/sdk.class.php";
                if(file_exists($ali_oss_sdk))
                {
                    require_once $ali_oss_sdk;
                    
                    if(class_exists("ALIOSS"))
                    {
                        $oss_sdk_service = new ALIOSS();
                        //设置是否打开curl调试模式
                        $oss_sdk_service->set_debug_mode(FALSE);
            
                        $bucket = $GLOBALS['distribution_cfg']['OSS_BUCKET_NAME'];
                        $object = $dir."/".$file;
                        $file_path = APP_ROOT_PATH.$dir."/".$file;
            
                        $oss_sdk_service->upload_file_by_file($bucket,$object,$file_path);
                    }                   
                }
                
            }
        }
    
    }
}


//关于session
if(!class_exists("FanweSessionHandler"))
{
    class FanweSessionHandler
    {
        private $savePath;
        private $mem;  //Memcache使用
        private $db;    //数据库使用
        private $table; //数据库使用
    
        function open($savePath, $sessionName)
        {
            $this->savePath = APP_ROOT_PATH.$GLOBALS['distribution_cfg']['SESSION_FILE_PATH'];
            if($GLOBALS['distribution_cfg']['SESSION_TYPE']=="MemcacheSASL")
            {
                $this->mem = require_once APP_ROOT_PATH."system/cache/MemcacheSASL/MemcacheSASL.php";
                $this->mem = new MemcacheSASL;
                $this->mem->addServer($GLOBALS['distribution_cfg']['SESSION_CLIENT'], $GLOBALS['distribution_cfg']['SESSION_PORT']);
                $this->mem->setSaslAuthData($GLOBALS['distribution_cfg']['SESSION_USERNAME'],$GLOBALS['distribution_cfg']['SESSION_PASSWORD']);
            }
            elseif($GLOBALS['distribution_cfg']['SESSION_TYPE']=="Db")
            {
                $pconnect = false;
                $session_client = $GLOBALS['distribution_cfg']['SESSION_CLIENT']==""?app_conf('DB_HOST'):$GLOBALS['distribution_cfg']['SESSION_CLIENT'];
                $session_port = $GLOBALS['distribution_cfg']['SESSION_PORT']==""?app_conf('DB_PORT'):$GLOBALS['distribution_cfg']['SESSION_PORT'];
                $session_username = $GLOBALS['distribution_cfg']['SESSION_USERNAME']==""?app_conf('DB_USER'):$GLOBALS['distribution_cfg']['SESSION_USERNAME'];
                $session_password = $GLOBALS['distribution_cfg']['SESSION_PASSWORD']==""?app_conf('DB_PWD'):$GLOBALS['distribution_cfg']['SESSION_PASSWORD'];
                $session_db = $GLOBALS['distribution_cfg']['SESSION_DB']==""?app_conf('DB_NAME'):$GLOBALS['distribution_cfg']['SESSION_DB'];
                $this->db = new mysql_db($session_client.":".$session_port, $session_username,$session_password,$session_db,'utf8',$pconnect);
                $this->table = $GLOBALS['distribution_cfg']['SESSION_TABLE']==""?DB_PREFIX."session":$GLOBALS['distribution_cfg']['SESSION_TABLE'];
            }
            else
            {
                if (!is_dir($this->savePath)) {
                    @mkdir($this->savePath, 0777);
                }
            }
            return true;
        }
    
        function close()
        {
            return true;
        }
    
        function read($id)
        {
            $sess_id = "sess_".$id;
            if($GLOBALS['distribution_cfg']['SESSION_TYPE']=="MemcacheSASL")
            {
                return $this->mem->get("$this->savePath/$sess_id");
            }
            elseif($GLOBALS['distribution_cfg']['SESSION_TYPE']=="Db")
            {
                $session_data = $this->db->getRow("select session_data,session_time from ".$this->table." where session_id = '".$sess_id."'",true);
                if($session_data['session_time']<TIME_UTC)
                {
                    return false;
                }
                else
                {
                    return $session_data['session_data'];
                }
            }
            else
            {
                $file = "$this->savePath/$sess_id";
                if (filemtime($file) + SESSION_TIME < time() && file_exists($file)) {
                    @unlink($file);
                }
                $data = (string)@file_get_contents($file);
                return $data;
            }
        }
    
        function write($id, $data)
        {
    
            $sess_id = "sess_".$id;
            if($GLOBALS['distribution_cfg']['SESSION_TYPE']=="MemcacheSASL")
            {
                return $this->mem->set("$this->savePath/$sess_id",$data,SESSION_TIME);
            }
            elseif($GLOBALS['distribution_cfg']['SESSION_TYPE']=="Db")
            {
                $session_data = $this->db->getRow("select session_data,session_time from ".$this->table." where session_id = '".$sess_id."'",true);
                if($session_data)
                {
                    $session_data['session_data'] = $data;
                    $session_data['session_time'] = TIME_UTC+SESSION_TIME;
                    $this->db->autoExecute($this->table, $session_data,"UPDATE","session_id = '".$sess_id."'");
                }
                else
                {
                    $session_data['session_id'] = $sess_id;
                    $session_data['session_data'] = $data;
                    $session_data['session_time'] = TIME_UTC+SESSION_TIME;
                    $this->db->autoExecute($this->table, $session_data);
                }
                return true;
            }
            else
            {
                return file_put_contents("$this->savePath/$sess_id", $data) === false ? false : true;
            }
        }
    
        function destroy($id)
        {
    
            $sess_id = "sess_".$id;
            if($GLOBALS['distribution_cfg']['SESSION_TYPE']=="MemcacheSASL")
            {
                $this->mem->delete($sess_id);
            }
            elseif($GLOBALS['distribution_cfg']['SESSION_TYPE']=="Db")
            {
                $this->db->query("delete from ".$this->table." where session_id = '".$sess_id."'");
            }
            else
            {
                $file = "$this->savePath/$sess_id";
                if (file_exists($file)) {
                    @unlink($file);
                }
            }
            return true;
        }
    
        function gc($maxlifetime)
        {
            if($GLOBALS['distribution_cfg']['SESSION_TYPE']=="MemcacheSASL")
            {
    
            }
            elseif($GLOBALS['distribution_cfg']['SESSION_TYPE']=="Db")
            {
                $this->db->query("delete from ".$this->table." where session_time < ".TIME_UTC);
            }
            else
            {
                foreach (glob("$this->savePath/sess_*") as $file) {
                    if (filemtime($file) + SESSION_TIME < time() && file_exists($file)) {
                        unlink($file);
                    }
                }
            }
            return true;
        }
    }
}


//关于session的开启
if(!function_exists("es_session_start"))
{
    function es_session_start($session_id)
    {
        session_set_cookie_params(0,$GLOBALS['distribution_cfg']['COOKIE_PATH'],$GLOBALS['distribution_cfg']['DOMAIN_ROOT'],false,true);
        if($GLOBALS['distribution_cfg']['SESSION_FILE_PATH']!=""||$GLOBALS['distribution_cfg']['SESSION_TYPE']=="MemcacheSASL"||$GLOBALS['distribution_cfg']['SESSION_TYPE']=="Db")
        {
            $handler = new FanweSessionHandler();
            session_set_save_handler(
            array($handler, 'open'),
            array($handler, 'close'),
            array($handler, 'read'),
            array($handler, 'write'),
            array($handler, 'destroy'),
            array($handler, 'gc')
            );
        }
        if($session_id)
            session_id($session_id);
        @session_start();
    }
}
?>